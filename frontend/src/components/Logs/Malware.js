// src/components/Logs/Malware.js
import React, { useState, useEffect, useRef } from 'react';
import { useOutletContext } from 'react-router-dom';
import {
  Box,
  Paper,
  Typography,
  Grid,
  Card,
  CardContent,
  Button,
  CircularProgress,
  IconButton,
  Tooltip,
  Dialog,
  DialogContent,
  DialogTitle,
  DialogActions,
  useTheme,
  Divider,
  TextField,
  InputAdornment,
  Chip,
  Alert,
  Zoom,
  CardActionArea
} from '@mui/material';
import FileDownloadIcon from '@mui/icons-material/FileDownload';
import FullscreenIcon from '@mui/icons-material/Fullscreen';
import FullscreenExitIcon from '@mui/icons-material/FullscreenExit';
import RefreshIcon from '@mui/icons-material/Refresh';
import CloseIcon from '@mui/icons-material/Close';
import TimelineIcon from '@mui/icons-material/Timeline';
import SecurityIcon from '@mui/icons-material/Security';
import EventIcon from '@mui/icons-material/Event';
import SearchIcon from '@mui/icons-material/Search';
import VisibilityIcon from '@mui/icons-material/Visibility';
import DnsIcon from '@mui/icons-material/Dns';
import DownloadIcon from '@mui/icons-material/Download';
import VirusIcon from '@mui/icons-material/Coronavirus';
import AIIcon from '@mui/icons-material/Psychology';
import RootcheckIcon from '@mui/icons-material/VerifiedUser';
import BugReportIcon from '@mui/icons-material/BugReport';
import DescriptionIcon from '@mui/icons-material/Description';
import Snackbar from '@mui/material/Snackbar';
import { DataGrid } from '@mui/x-data-grid';
import { motion } from 'framer-motion';

// Import TimeRangeSelector component
import TimeRangeSelector from '../Common/TimeRangeSelector';
import { StructuredLogView } from './StructuredLogView';

// Import chart library
import ReactECharts from 'echarts-for-react';
import * as echarts from 'echarts/core';

// Import service for data fetching
import { getMalwareLogs } from '../../services/logs';

// Vibrant color palette
const COLOR_PALETTE = [
  '#5D3FD3',   // Purple - VirusScanner
  '#5DADE2',   // Blue - SentinelAI
  '#2ECC71',   // Green - rootcheck
  '#F39C12',   // Orange
  '#E74C3C',   // Red
  '#F1C40F',   // Yellow
  '#1ABC9C',   // Teal
  '#9B59B6',   // Violet
  '#34495E'    // Navy
];

// Export to CSV utility 
const exportToCSV = (logs, fileName = 'malware_logs.csv') => {
  if (!logs || logs.length === 0) {
    console.error('No logs to export');
    return false;
  }

  try {
    // Get all unique keys for CSV header
    const baseKeys = ['id', '@timestamp', 'agent.name', 'rule.level', 'rule.description', 'rule.groups'];

    const headers = [...baseKeys];

    // Create CSV header row
    let csv = headers.join(',') + '\n';

    // Add data rows
    logs.forEach(log => {
      const row = headers.map(key => {
        // Handle nested properties
        if (key.includes('.')) {
          const parts = key.split('.');
          let value = log;
          for (const part of parts) {
            if (!value) return '';
            value = value[part];
          }

          if (Array.isArray(value)) {
            return `"${value.join('; ').replace(/"/g, '""')}"`;
          }
          
          // Format dates
          if (key.includes('time') && value) {
            try {
              return `"${new Date(value).toISOString().replace(/"/g, '""')}"`;
            } catch (e) {
              return `"${String(value).replace(/"/g, '""')}"`;
            }
          }

          return value ? `"${String(value).replace(/"/g, '""')}"` : '';
        }

        // Handle regular properties
        if (log[key] === undefined || log[key] === null) return '';
        if (typeof log[key] === 'object') return '';

        // Escape quotes and format as CSV cell
        return `"${String(log[key]).replace(/"/g, '""')}"`;
      }).join(',');

      csv += row + '\n';
    });

    // Create blob and download
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.setAttribute('href', url);
    link.setAttribute('download', fileName);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    return true;
  } catch (error) {
    console.error('Error exporting CSV:', error);
    return false;
  }
};

// Format date for file name
const formatDateForFileName = (date) => {
  return date.toISOString()
    .replace(/[:.]/g, '-')
    .replace('T', '_')
    .split('.')[0];
};

// Main Malware Component
const Malware = () => {
  const theme = useTheme();
  const { setPageTitle } = useOutletContext();
  const [timeRange, setTimeRange] = useState('7d');
  const [logs, setLogs] = useState([]);
  const [stats, setStats] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [page, setPage] = useState(0);
  const [pageSize, setPageSize] = useState(50);
  const [totalRows, setTotalRows] = useState(0);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedLog, setSelectedLog] = useState(null);
  const [fullscreenChart, setFullscreenChart] = useState(null);
  const [fullscreenTitle, setFullscreenTitle] = useState('');
  const [exportDialogOpen, setExportDialogOpen] = useState(false);
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });
  const [isSearching, setIsSearching] = useState(false);
  const [showStructuredView, setShowStructuredView] = useState(false);
  const [activeFilters, setActiveFilters] = useState([]);

  const dashboardRef = useRef(null);
  
  useEffect(() => {
    setPageTitle('Malware Detection');
    fetchMalwareLogs();
  }, [timeRange]);
  
  useEffect(() => {
    fetchMalwareLogs(page, pageSize, searchTerm);
  }, [page, pageSize]);

  // Fetch logs with malware events
  const fetchMalwareLogs = async (currentPage = 0, limit = pageSize, search = searchTerm) => {
    try {
      setLoading(true);
      setError(null);

      // Convert to 1-indexed for API
      const apiPage = currentPage + 1;

      console.log(`Fetching malware logs with params: page=${apiPage}, limit=${limit}, search="${search}", timeRange=${timeRange}`);

      // Add source type filter if active
      let sourceTypeFilter = '';
      if (activeFilters.length > 0) {
        sourceTypeFilter = activeFilters.join(',');
      }

      const response = await getMalwareLogs({
        page: apiPage,
        limit,
        search,
        timeRange,
        sourceType: sourceTypeFilter,
        sortBy: '@timestamp',
        sortOrder: 'desc'
      });

      if (response) {
        setLogs(response.logs || []);
        setStats(response.stats || null);
        setTotalRows(response.pagination?.total || 0);
        console.log(`Received ${response.logs?.length} malware events out of ${response.pagination?.total} total`);
      } else {
        console.error('Invalid response format');
        setError('Invalid response from server');
      }
    } catch (error) {
      console.error('Error fetching malware logs:', error);
      setError(error.message || 'Failed to fetch malware logs. Please try again later.');
    } finally {
      setLoading(false);
      setIsSearching(false);
    }
  };

  const handleRefresh = () => {
    fetchMalwareLogs(page, pageSize, searchTerm);
  };

  const handleSearch = (e) => {
    e.preventDefault();
    setIsSearching(true);
    setPage(0);
    fetchMalwareLogs(0, pageSize, searchTerm);
  };

  const handleViewDetails = (log) => {
    setSelectedLog(log);
    setShowStructuredView(true);
  };

  const handleCloseStructuredView = () => {
    setShowStructuredView(false);
    setSelectedLog(null);
  };

  const handlePageChange = (newPage) => {
    console.log(`Page changing from ${page} to ${newPage}`);
    setPage(newPage);
  };

  const handlePageSizeChange = (newPageSize) => {
    console.log(`Page size changing from ${pageSize} to ${newPageSize}`);
    setPageSize(newPageSize);
    setPage(0);
  };

  const openFullscreen = (chartOption, title) => {
    setFullscreenChart(chartOption);
    setFullscreenTitle(title || 'Chart Details');
  };

  const closeFullscreen = () => {
    setFullscreenChart(null);
    setFullscreenTitle('');
  };

  // Export current page logs
  const exportCurrentPage = () => {
    setExportDialogOpen(false);
    const success = exportToCSV(logs, `malware_logs_page_${page + 1}_${formatDateForFileName(new Date())}.csv`);
    setSnackbar({
      open: true,
      message: success ? 'Logs exported successfully' : 'Failed to export logs',
      severity: success ? 'success' : 'error'
    });
  };

  // Export all logs for current filters
  const exportAllLogs = async () => {
    setExportDialogOpen(false);
    setLoading(true);

    try {
      // Fetch all logs with current filters but larger page size
      const maxResults = Math.min(totalRows, 10000); // Limit to 10,000 to prevent memory issues
      
      // Add source type filter if active
      let sourceTypeFilter = '';
      if (activeFilters.length > 0) {
        sourceTypeFilter = activeFilters.join(',');
      }

      const response = await getMalwareLogs({
        page: 1,
        limit: maxResults,
        search: searchTerm,
        timeRange,
        sourceType: sourceTypeFilter
      });

      const success = exportToCSV(
        response.logs || [],
        `all_malware_logs_${formatDateForFileName(new Date())}.csv`
      );

      setSnackbar({
        open: true,
        message: success
          ? `Exported ${response.logs?.length || 0} malware events successfully`
          : 'Failed to export logs',
        severity: success ? 'success' : 'error'
      });
    } catch (error) {
      console.error('Error exporting all logs:', error);
      setSnackbar({
        open: true,
        message: 'Failed to export logs',
        severity: 'error'
      });
    } finally {
      setLoading(false);
    }
  };

  // Export dashboard as PDF
  const handleExport = () => {
    // Open export dialog for CSV
    setExportDialogOpen(true);
  };

  // Toggle source type filter
  const toggleSourceTypeFilter = (sourceType) => {
    let newFilters;
    
    if (activeFilters.includes(sourceType)) {
      // Remove the filter
      newFilters = activeFilters.filter(f => f !== sourceType);
    } else {
      // Add the filter
      newFilters = [...activeFilters, sourceType];
    }
    
    setActiveFilters(newFilters);
    
    // Reset page to 0 and fetch with new filters
    setPage(0);
    
    // Small delay to allow state to update
    setTimeout(() => {
      fetchMalwareLogs(0, pageSize, searchTerm);
    }, 100);
  };

  // Process data for charts
  const processChartData = () => {
    if (!stats) return {
      timelineData: [],
      bySourceTypeData: [],
      byAgentData: [],
      byDescriptionData: [],
      totalEvents: 0,
      virusScannerCount: 0,
      sentinelAICount: 0,
      rootcheckCount: 0
    };

    // Calculate counts by source type
    let virusScannerCount = 0;
    let sentinelAICount = 0;
    let rootcheckCount = 0;

    if (stats.bySourceType && Array.isArray(stats.bySourceType)) {
      stats.bySourceType.forEach(type => {
        if (type.type === 'VirusScanner') virusScannerCount = type.count || 0;
        else if (type.type === 'SentinelAI') sentinelAICount = type.count || 0;
        else if (type.type === 'rootcheck') rootcheckCount = type.count || 0;
      });
    }

    // Convert timeline data to usable format for chart
    const timelineByDate = {};
    
    if (stats.timeDistribution && Array.isArray(stats.timeDistribution)) {
      stats.timeDistribution.forEach(item => {
        if (!item || !item.date) return;
        
        try {
          const date = new Date(item.date).toLocaleDateString();
          if (!timelineByDate[date]) {
            timelineByDate[date] = {
              date,
              VirusScanner: 0,
              SentinelAI: 0,
              rootcheck: 0,
              total: 0
            };
          }
          
          if (item.sourceTypes) {
            if (item.sourceTypes.VirusScanner) timelineByDate[date].VirusScanner = item.sourceTypes.VirusScanner;
            if (item.sourceTypes.SentinelAI) timelineByDate[date].SentinelAI = item.sourceTypes.SentinelAI;
            if (item.sourceTypes.rootcheck) timelineByDate[date].rootcheck = item.sourceTypes.rootcheck;
          }
          
          timelineByDate[date].total = item.count || 0;
        } catch (e) {
          console.error("Error processing timeline data", e);
        }
      });
    }
    
    // Convert to array and sort by date
    const timelineData = Object.values(timelineByDate).sort((a, b) => {
      return new Date(a.date) - new Date(b.date);
    });

    return {
      timelineData,
      bySourceTypeData: stats.bySourceType || [],
      byAgentData: Array.isArray(stats.byAgent) ? stats.byAgent : [],
      byDescriptionData: Array.isArray(stats.byDescription) ? stats.byDescription : [],
      totalEvents: stats.total || 0,
      virusScannerCount,
      sentinelAICount,
      rootcheckCount
    };
  };

  // Get the appropriate color for source type
  const getSourceTypeColor = (sourceType) => {
    switch(sourceType) {
      case 'VirusScanner':
        return COLOR_PALETTE[0]; // Purple
      case 'SentinelAI':
        return COLOR_PALETTE[1]; // Blue
      case 'rootcheck':
        return COLOR_PALETTE[2]; // Green
      default:
        return COLOR_PALETTE[3]; // Orange
    }
  };

  // Get icon for source type
  const getSourceTypeIcon = (sourceType) => {
    switch(sourceType) {
      case 'VirusScanner':
        return <VirusIcon />;
      case 'SentinelAI':
        return <AIIcon />;
      case 'rootcheck':
        return <RootcheckIcon />;
      default:
        return <BugReportIcon />;
    }
  };

  // Timeline Chart Option
  const getTimelineChartOption = () => {
    const chartData = processChartData();
    const timelineData = chartData.timelineData || [];

    // If no data, return a simple placeholder chart
    if (timelineData.length === 0) {
      return {
        title: {
          text: 'Malware Events Timeline (No Data)',
          left: 'center',
          textStyle: {
            color: theme.palette.mode === 'dark' ? '#fff' : '#333',
            fontFamily: theme.typography.fontFamily,
            fontSize: 18,
            fontWeight: 500
          }
        },
        xAxis: {
          type: 'category',
          data: ['No Data']
        },
        yAxis: {
          type: 'value'
        },
        series: [{
          data: [0],
          type: 'line'
        }]
      };
    }

    const dates = timelineData.map(item => item.date);
    
    return {
      title: {
        text: 'Malware Detection Timeline',
        left: 'center',
        textStyle: {
          color: theme.palette.mode === 'dark' ? '#fff' : '#333',
          fontFamily: theme.typography.fontFamily,
          fontSize: 18,
          fontWeight: 500
        }
      },
      tooltip: {
        trigger: 'axis',
        backgroundColor: theme.palette.mode === 'dark' ? 'rgba(50,50,50,0.9)' : 'rgba(255,255,255,0.9)',
        borderColor: theme.palette.divider,
        textStyle: {
          color: theme.palette.mode === 'dark' ? '#fff' : '#333'
        },
        formatter: function (params) {
          let tooltip = `<strong>${params[0].name}</strong><br />`;
          
          // Add each series with its color
          params.forEach(param => {
            tooltip += `${param.seriesName}: <span style="color:${param.color};font-weight:bold">${param.value}</span><br />`;
          });
          
          return tooltip;
        }
      },
      legend: {
        data: ['VirusScanner', 'SentinelAI', 'rootcheck'],
        bottom: '0%',
        textStyle: {
          color: theme.palette.text.primary,
          fontFamily: theme.typography.fontFamily
        }
      },
      grid: {
        left: '3%',
        right: '4%',
        bottom: '10%',
        containLabel: true
      },
      xAxis: {
        type: 'category',
        data: dates,
        axisLabel: {
          color: theme.palette.text.secondary,
          rotate: 45,
          fontFamily: theme.typography.fontFamily
        },
        axisLine: {
          lineStyle: {
            color: theme.palette.divider
          }
        }
      },
      yAxis: {
        type: 'value',
        name: 'Event Count',
        nameLocation: 'middle',
        nameGap: 50,
        nameTextStyle: {
          color: theme.palette.text.secondary,
          fontFamily: theme.typography.fontFamily,
          fontSize: 14
        },
        axisLabel: {
          color: theme.palette.text.secondary,
          fontFamily: theme.typography.fontFamily
        },
        axisLine: {
          lineStyle: {
            color: theme.palette.divider
          }
        },
        splitLine: {
          lineStyle: {
            color: theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.1)' : 'rgba(0,0,0,0.1)'
          }
        }
      },
      series: [
        {
          name: 'VirusScanner',
          type: 'line',
          stack: 'Total',
          smooth: true,
          data: timelineData.map(item => item.VirusScanner || 0),
          symbol: 'circle',
          symbolSize: 8,
          lineStyle: {
            width: 3,
            color: COLOR_PALETTE[0] // Purple
          },
          itemStyle: {
            color: COLOR_PALETTE[0]
          },
          areaStyle: {
            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
              { offset: 0, color: `${COLOR_PALETTE[0]}80` },
              { offset: 1, color: `${COLOR_PALETTE[0]}10` }
            ])
          },
          emphasis: {
            focus: 'series',
            itemStyle: {
              shadowBlur: 10,
              shadowColor: 'rgba(0, 0, 0, 0.5)'
            }
          }
        },
        {
          name: 'SentinelAI',
          type: 'line',
          stack: 'Total',
          smooth: true,
          data: timelineData.map(item => item.SentinelAI || 0),
          symbol: 'circle',
          symbolSize: 8,
          lineStyle: {
            width: 3,
            color: COLOR_PALETTE[1] // Blue
          },
          itemStyle: {
            color: COLOR_PALETTE[1]
          },
          areaStyle: {
            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
              { offset: 0, color: `${COLOR_PALETTE[1]}80` },
              { offset: 1, color: `${COLOR_PALETTE[1]}10` }
            ])
          },
          emphasis: {
            focus: 'series',
            itemStyle: {
              shadowBlur: 10,
              shadowColor: 'rgba(0, 0, 0, 0.5)'
            }
          }
        },
        {
          name: 'rootcheck',
          type: 'line',
          stack: 'Total',
          smooth: true,
          data: timelineData.map(item => item.rootcheck || 0),
          symbol: 'circle',
          symbolSize: 8,
          lineStyle: {
            width: 3,
            color: COLOR_PALETTE[2] // Green
          },
          itemStyle: {
            color: COLOR_PALETTE[2]
          },
          areaStyle: {
            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
              { offset: 0, color: `${COLOR_PALETTE[2]}80` },
              { offset: 1, color: `${COLOR_PALETTE[2]}10` }
            ])
          },
          emphasis: {
            focus: 'series',
            itemStyle: {
              shadowBlur: 10,
              shadowColor: 'rgba(0, 0, 0, 0.5)'
            }
          }
        }
      ],
      backgroundColor: 'transparent'
    };
  };

  // Top Descriptions Horizontal Bar Chart
  const getTopDescriptionsChartOption = () => {
    const chartData = processChartData();
    const descriptionsData = chartData.byDescriptionData || [];

    if (descriptionsData.length === 0) {
      return {
        title: {
          text: 'Top Malware Detections (No Data)',
          left: 'center',
          textStyle: {
            color: theme.palette.mode === 'dark' ? '#fff' : '#333',
            fontFamily: theme.typography.fontFamily,
            fontSize: 16,
            fontWeight: 500
          }
        },
        xAxis: {
          type: 'value'
        },
        yAxis: {
          type: 'category',
          data: ['No Data']
        },
        series: [{
          data: [0],
          type: 'bar'
        }]
      };
    }

    // Get top 7 descriptions
    const topDescriptions = descriptionsData
      .slice(0, 7)
      .sort((a, b) => b.count - a.count);

    const categories = topDescriptions.map(desc => {
      // Truncate long descriptions for better display
      const maxLength = 35;
      const description = desc.description || '';
      return description.length > maxLength 
        ? description.substring(0, maxLength) + '...'
        : description;
    });
    const values = topDescriptions.map(desc => desc.count);
    const fullDescriptions = topDescriptions.map(desc => desc.description || '');

    return {
      title: {
        text: 'Top Malware Detections',
        left: 'center',
        textStyle: {
          color: theme.palette.mode === 'dark' ? '#fff' : '#333',
          fontFamily: theme.typography.fontFamily,
          fontSize: 16,
          fontWeight: 500
        }
      },
      tooltip: {
        trigger: 'axis',
        backgroundColor: theme.palette.mode === 'dark' ? 'rgba(50,50,50,0.9)' : 'rgba(255,255,255,0.9)',
        borderColor: theme.palette.divider,
        textStyle: {
          color: theme.palette.mode === 'dark' ? '#fff' : '#333'
        },
        formatter: function (params) {
          const param = params[0];
          const index = param.dataIndex;
          // Show full description in tooltip
          return `<strong>${fullDescriptions[index]}</strong><br />
            Events: <span style="color:${param.color};font-weight:bold">${param.value}</span>`;
        }
      },
      grid: {
        left: '3%',
        right: '4%',
        bottom: '3%',
        containLabel: true
      },
      xAxis: {
        type: 'value',
        axisLabel: {
          color: theme.palette.text.secondary,
          fontFamily: theme.typography.fontFamily
        },
        axisLine: {
          lineStyle: {
            color: theme.palette.divider
          }
        },
        splitLine: {
          lineStyle: {
            color: theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.1)' : 'rgba(0,0,0,0.1)'
          }
        }
      },
      yAxis: {
        type: 'category',
        data: categories,
        axisLabel: {
          color: theme.palette.text.secondary,
          fontFamily: theme.typography.fontFamily,
          width: 250,
          overflow: 'truncate',
          formatter: function (value) {
            // Truncate long text for y-axis labels
            const maxLength = 35;
            return value.length > maxLength ? value.substring(0, maxLength) + '...' : value;
          }
        },
        axisLine: {
          lineStyle: {
            color: theme.palette.divider
          }
        }
      },
      series: [{
        name: 'Events',
        type: 'bar',
        data: values.map((value, index) => ({
          value,
          itemStyle: {
            color: new echarts.graphic.LinearGradient(0, 0, 1, 0, [
              { offset: 0, color: `${COLOR_PALETTE[index % COLOR_PALETTE.length]}90` },
              { offset: 1, color: `${COLOR_PALETTE[index % COLOR_PALETTE.length]}` }
            ])
          }
        })),
        label: {
          show: true,
          position: 'right',
          formatter: '{c}',
          fontFamily: theme.typography.fontFamily,
          color: theme.palette.text.primary
        },
        emphasis: {
          itemStyle: {
            shadowBlur: 10,
            shadowOffsetX: 0,
            shadowColor: 'rgba(0, 0, 0, 0.5)'
          }
        },
        barWidth: '60%'
      }],
      backgroundColor: 'transparent'
    };
  };

  // Render chart with fullscreen capability
  const renderChart = (chartOption, title, icon) => {
    return (
      <Paper
        elevation={3}
        sx={{
          p: 2,
          height: '100%',
          borderRadius: 2,
          display: 'flex',
          flexDirection: 'column',
          boxShadow: theme.palette.mode === 'dark'
            ? '0 4px 20px 0 rgba(0,0,0,0.5)'
            : '0 4px 20px 0 rgba(0,0,0,0.1)',
          position: 'relative',
          overflow: 'hidden',
          '&:hover': {
            boxShadow: theme.palette.mode === 'dark'
              ? '0 8px 25px 0 rgba(0,0,0,0.6)'
              : '0 8px 25px 0 rgba(0,0,0,0.15)',
            '& .fullscreen-icon': {
              opacity: 1
            }
          },
          transition: 'box-shadow 0.3s ease'
        }}
      >
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
          <Typography variant="h6" sx={{ display: 'flex', alignItems: 'center' }}>
            {icon}
            <Box component="span" sx={{ ml: 1 }}>{title}</Box>
          </Typography>
          <Tooltip title="View Fullscreen">
            <IconButton
              size="small"
              onClick={() => openFullscreen(chartOption, title)}
              className="fullscreen-icon"
              sx={{
                bgcolor: theme.palette.background.paper,
                boxShadow: 1,
                opacity: 0.7,
                transition: 'opacity 0.2s ease',
                '&:hover': {
                  bgcolor: theme.palette.action.hover
                }
              }}
            >
              <FullscreenIcon fontSize="small" />
            </IconButton>
          </Tooltip>
        </Box>
        <Divider sx={{ mb: 2 }} />
        <Box sx={{ flexGrow: 1, height: 'calc(100% - 40px)', minHeight: '300px' }}>
          <ReactECharts
            option={chartOption}
            style={{ height: '100%', width: '100%' }}
            opts={{ renderer: 'canvas' }}
            theme={theme.palette.mode === 'dark' ? 'dark' : ''}
            notMerge={true}
            lazyUpdate={true}
          />
        </Box>
      </Paper>
    );
  };

  // DataGrid column definitions
  const columns = [
    {
      field: '@timestamp',
      headerName: 'Timestamp',
      flex: 1,
      minWidth: 180,
      valueGetter: (params) => {
        try {
          if (!params.row['@timestamp']) return 'N/A';
          return new Date(params.row['@timestamp']).toLocaleString();
        } catch(e) {
          return 'Invalid Date';
        }
      },
      renderCell: (params) => (
        <Box sx={{
          display: 'flex',
          alignItems: 'center',
          '&:hover': { color: theme.palette.primary.main }
        }}>
          <EventIcon fontSize="small" sx={{ mr: 1, opacity: 0.7 }} />
          <Typography variant="body2">
            {params.value}
          </Typography>
        </Box>
      )
    },
    {
      field: 'agent.name',
      headerName: 'Agent',
      flex: 0.8,
      minWidth: 130,
      valueGetter: (params) => params.row.agent?.name || 'N/A',
      renderCell: (params) => (
        <Box sx={{
          display: 'flex',
          alignItems: 'center',
          '&:hover': { color: theme.palette.primary.main }
        }}>
          <DnsIcon fontSize="small" sx={{ mr: 1, opacity: 0.7 }} />
          <Typography variant="body2" noWrap>
            {params.row.agent?.name || 'N/A'}
          </Typography>
        </Box>
      )
    },
    {
      field: 'rule.groups',
      headerName: 'Source',
      flex: 0.8,
      minWidth: 140,
      valueGetter: (params) => {
        const groups = params.row.rule?.groups || [];
        // Return the relevant malware source type
        if (groups.includes('VirusScanner')) return 'VirusScanner';
        if (groups.includes('SentinelAI')) return 'SentinelAI';
        if (groups.includes('rootcheck')) return 'rootcheck';
        return groups.join(', ') || 'N/A';
      },
      renderCell: (params) => {
        const value = params.value;
        let icon, color, bgColor;
        
        switch(value) {
          case 'VirusScanner':
            icon = <VirusIcon fontSize="small" />;
            color = 'primary';
            bgColor = theme.palette.mode === 'dark' ? 'rgba(93, 63, 211, 0.2)' : 'rgba(93, 63, 211, 0.1)';
            break;
          case 'SentinelAI':
            icon = <AIIcon fontSize="small" />;
            color = 'info';
            bgColor = theme.palette.mode === 'dark' ? 'rgba(93, 173, 226, 0.2)' : 'rgba(93, 173, 226, 0.1)';
            break;
          case 'rootcheck':
            icon = <RootcheckIcon fontSize="small" />;
            color = 'success';
            bgColor = theme.palette.mode === 'dark' ? 'rgba(46, 204, 113, 0.2)' : 'rgba(46, 204, 113, 0.1)';
            break;
          default:
            icon = <BugReportIcon fontSize="small" />;
            color = 'default';
            bgColor = 'transparent';
        }
        
        return (
          <Chip
            icon={icon}
            label={value}
            color={color}
            size="small"
            variant="outlined"
            sx={{
              height: '24px',
              fontWeight: 500,
              bgcolor: bgColor,
              '&:hover': {
                bgcolor: theme.palette.mode === 'dark' ? `${bgColor}CC` : `${bgColor}99`,
                boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
              }
            }}
          />
        );
      },
      sortable: true
    },
    {
      field: 'rule.level',
      headerName: 'Level',
      flex: 0.5,
      minWidth: 80,
      valueGetter: (params) => params.row.rule?.level || 'N/A',
      renderCell: (params) => {
        // Determine color based on rule level severity
        let color = 'default';
        const level = Number(params.value);
        
        if (level >= 12) color = 'error';
        else if (level >= 8) color = 'warning';
        else if (level >= 4) color = 'info';
        else color = 'success';
        
        return (
          <Chip
            label={params.value}
            color={color}
            size="small"
            variant="filled"
            sx={{
              height: '24px',
              minWidth: '30px',
              fontWeight: 'bold'
            }}
          />
        );
      }
    },
    {
      field: 'rule.description',
      headerName: 'Description',
      flex: 1.5,
      minWidth: 250,
      valueGetter: (params) => params.row.rule?.description || 'N/A',
      renderCell: (params) => (
        <Tooltip title={params.row.rule?.description || 'N/A'}>
          <Typography variant="body2" noWrap sx={{ maxWidth: 220 }}>
            {params.row.rule?.description || 'N/A'}
          </Typography>
        </Tooltip>
      )
    },
    {
      field: 'actions',
      headerName: 'Actions',
      flex: 0.5,
      minWidth: 80,
      sortable: false,
      renderCell: (params) => (
        <Tooltip title="View Details">
          <IconButton
            size="small"
            color="primary"
            onClick={(event) => {
              event.stopPropagation();
              handleViewDetails(params.row);
            }}
            sx={{
              boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
              '&:hover': {
                boxShadow: '0 2px 5px rgba(0,0,0,0.2)',
                backgroundColor: theme.palette.primary.light
              }
            }}
          >
            <VisibilityIcon fontSize="small" />
          </IconButton>
        </Tooltip>
      )
    }
  ];

  // Create a card for source type metrics
  const renderSourceTypeCard = (title, count, color, icon, sourceType) => {
    const isActive = activeFilters.includes(sourceType);
    
    return (
      <Grid item xs={12} sm={6} md={4}>
        <Card 
          component={motion.div}
          whileHover={{ 
            y: -5,
            boxShadow: "0 10px 20px rgba(0,0,0,0.2)"
          }}
          transition={{ duration: 0.3 }}
          elevation={isActive ? 8 : 3} 
          sx={{
            borderRadius: 2,
            background: `linear-gradient(135deg, ${color}85, ${color}60)`,
            position: 'relative',
            overflow: 'hidden',
            border: isActive ? `2px solid ${color}` : 'none',
            cursor: 'pointer',
            boxShadow: isActive 
              ? `0 8px 16px ${color}40` 
              : '0 6px 12px rgba(0, 0, 0, 0.1)'
          }}
          onClick={() => toggleSourceTypeFilter(sourceType)}
        >
          <CardActionArea sx={{ position: 'relative', zIndex: 1 }}>
            <CardContent sx={{ py: 3, position: 'relative' }}>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                <Typography 
                  color="white" 
                  gutterBottom 
                  variant="h6" 
                  fontWeight={600}
                  sx={{ 
                    display: 'flex', 
                    alignItems: 'center',
                    textShadow: '0 1px 2px rgba(0,0,0,0.1)'
                  }}
                >
                  {React.cloneElement(icon, { sx: { mr: 1, fontSize: 28 } })}
                  <Box component="span">{title}</Box>
                </Typography>
                
                {isActive && (
                  <Chip
                    label="Filtered"
                    size="small"
                    color="primary"
                    variant="filled"
                    sx={{ 
                      backgroundColor: 'white', 
                      color: color, 
                      fontWeight: 'bold',
                      boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
                    }}
                  />
                )}
              </Box>
              
              <Typography variant="h3" component="div" sx={{ 
                fontWeight: 'bold', 
                color: 'white',
                textShadow: '0 2px 4px rgba(0,0,0,0.2)',
                mb: 1
              }}>
                {count.toLocaleString() || 0}
              </Typography>
              
              <Typography variant="body2" sx={{ color: 'rgba(255,255,255,0.9)' }}>
                {sourceType === 'VirusScanner' && 'Events detected by traditional antivirus scanning'}
                {sourceType === 'SentinelAI' && 'Threats identified by AI-powered behavioral analysis'}
                {sourceType === 'rootcheck' && 'System integrity verification results'}
              </Typography>
              
              <Box sx={{
                position: 'absolute',
                top: -20,
                right: -20,
                opacity: 0.2,
                transform: 'rotate(10deg)'
              }}>
                {React.cloneElement(icon, { sx: { fontSize: 120 } })}
              </Box>
            </CardContent>
          </CardActionArea>
          {isActive && (
            <Box sx={{ 
              position: 'absolute', 
              bottom: 0, 
              left: 0, 
              right: 0, 
              height: '4px', 
              bgcolor: 'white',
              boxShadow: '0 -1px 3px rgba(0,0,0,0.1)' 
            }} />
          )}
        </Card>
      </Grid>
    );
  };

  const { virusScannerCount, sentinelAICount, rootcheckCount, totalEvents } = processChartData();

  return (
    <Box>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Box sx={{ display: 'flex', flexDirection: 'column' }}>
          <Typography variant="h4" sx={{
            display: 'flex',
            alignItems: 'center',
            fontWeight: 600,
            background: 'linear-gradient(45deg, #5D3FD3, #5DADE2)',
            WebkitBackgroundClip: 'text',
            WebkitTextFillColor: 'transparent',
            textShadow: theme.palette.mode === 'dark'
              ? '0 2px 10px rgba(255,255,255,0.1)'
              : '0 2px 10px rgba(0,0,0,0.1)'
          }}>
            <BugReportIcon sx={{ mr: 1.5, color: 'primary.main' }} />
            Malware Detection
          </Typography>
          <Typography variant="subtitle1" color="text.secondary" sx={{ ml: 4 }}>
            Monitor and track malware threats across your systems
          </Typography>
        </Box>

        <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>
          <TimeRangeSelector
            value={timeRange}
            onChange={setTimeRange}
            disabled={loading}
          />

          <Tooltip title="Refresh Data">
            <IconButton
              color="primary"
              onClick={handleRefresh}
              disabled={loading}
              sx={{
                bgcolor: 'background.paper',
                boxShadow: 1,
                borderRadius: '50%',
                '&:hover': {
                  bgcolor: theme.palette.action.hover
                }
              }}
            >
              {loading ? <CircularProgress size={24} /> : <RefreshIcon />}
            </IconButton>
          </Tooltip>

          <Button
            variant="contained"
            color="primary"
            startIcon={<FileDownloadIcon />}
            onClick={handleExport}
            disabled={loading}
            sx={{
              borderRadius: 8,
              textTransform: 'none',
              fontWeight: 500,
              boxShadow: '0 2px 8px rgba(0,0,0,0.15)',
              '&:hover': {
                boxShadow: '0 4px 12px rgba(0,0,0,0.2)'
              }
            }}
          >
            Export Data
          </Button>
        </Box>
      </Box>

      {/* Key Metrics */}
      <Grid container spacing={3} sx={{ mb: 4 }} ref={dashboardRef}>
        <Grid item xs={12}>
          <Typography variant="h6" component="div" gutterBottom sx={{ fontWeight: 500 }}>
            Malware Detection Summary
          </Typography>
        </Grid>
        
        <Grid item xs={12} sm={6} md={4}>
          <Card 
            component={motion.div}
            whileHover={{ 
              y: -5,
              boxShadow: "0 10px 20px rgba(0,0,0,0.2)"
            }}
            transition={{ duration: 0.3 }}
            elevation={3} 
            sx={{
              borderRadius: 2,
              background: 'linear-gradient(135deg, rgba(45, 52, 54, 0.85), rgba(45, 52, 54, 0.6))',
              position: 'relative',
              overflow: 'hidden',
              boxShadow: '0 6px 12px rgba(0, 0, 0, 0.1)'
            }}
          >
            <CardContent sx={{ py: 3, position: 'relative' }}>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                <Typography 
                  color="white" 
                  gutterBottom 
                  variant="h6" 
                  fontWeight={600}
                  sx={{ 
                    display: 'flex', 
                    alignItems: 'center',
                    textShadow: '0 1px 2px rgba(0,0,0,0.1)'
                  }}
                >
                  <BugReportIcon sx={{ mr: 1, fontSize: 28 }} />
                  <Box component="span">Total Malware Events</Box>
                </Typography>
              </Box>
              
              <Typography variant="h3" component="div" sx={{ 
                fontWeight: 'bold', 
                color: 'white',
                textShadow: '0 2px 4px rgba(0,0,0,0.2)',
                mb: 1
              }}>
                {totalEvents.toLocaleString() || 0}
              </Typography>
              
              <Typography variant="body2" sx={{ color: 'rgba(255,255,255,0.9)' }}>
                Total malware events detected across all systems
              </Typography>
              
              <Box sx={{
                position: 'absolute',
                top: -20,
                right: -20,
                opacity: 0.2,
                transform: 'rotate(10deg)'
              }}>
                <BugReportIcon sx={{ fontSize: 120 }} />
              </Box>
            </CardContent>
          </Card>
        </Grid>
        
        {renderSourceTypeCard('Virus Scanner', virusScannerCount, COLOR_PALETTE[0], <VirusIcon />, 'VirusScanner')}
        {renderSourceTypeCard('Sentinel AI', sentinelAICount, COLOR_PALETTE[1], <AIIcon />, 'SentinelAI')}
        {renderSourceTypeCard('System Integrity', rootcheckCount, COLOR_PALETTE[2], <RootcheckIcon />, 'rootcheck')}
      </Grid>

      {/* Timeline Chart - Full Width */}
      <Grid container spacing={3} sx={{ mb: 4 }}>
        <Grid item xs={12}>
          {renderChart(
            getTimelineChartOption(),
            'Malware Detection Timeline',
            <TimelineIcon color="primary" sx={{ mr: 1 }} />
          )}
        </Grid>
      </Grid>

      {/* Top Descriptions Chart - Full Width */}
      <Grid container spacing={3} sx={{ mb: 4 }}>
        <Grid item xs={12}>
          {renderChart(
            getTopDescriptionsChartOption(),
            'Top Malware Detections',
            <DescriptionIcon color="info" sx={{ mr: 1 }} />
          )}
        </Grid>
      </Grid>

      {/* Logs Table */}
      <Paper
        elevation={3}
        sx={{
          p: 2,
          mb: 3,
          borderRadius: 2,
          bgcolor: theme.palette.mode === 'dark' ? 'background.default' : 'grey.50',
          border: '1px solid',
          borderColor: 'divider',
          boxShadow: '0 4px 20px rgba(0, 0, 0, 0.05)'
        }}
      >
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
          <Typography variant="h6" sx={{ fontWeight: 500 }}>
            Malware Detection Events
          </Typography>
          
          {activeFilters.length > 0 && (
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <Typography variant="body2" color="text.secondary">
                Filtered by:
              </Typography>
              {activeFilters.map(filter => (
                <Chip
                  key={filter}
                  label={filter}
                  color={filter === 'VirusScanner' ? 'primary' : filter === 'SentinelAI' ? 'info' : 'success'}
                  size="small"
                  onDelete={() => toggleSourceTypeFilter(filter)}
                  sx={{ fontWeight: 500 }}
                />
              ))}
              <Button 
                size="small" 
                onClick={() => {
                  setActiveFilters([]);
                  setTimeout(() => fetchMalwareLogs(0, pageSize, searchTerm), 100);
                }}
                sx={{ ml: 1 }}
              >
                Clear Filters
              </Button>
            </Box>
          )}
        </Box>

        <form onSubmit={handleSearch}>
          <TextField
            fullWidth
            variant="outlined"
            placeholder="Search for malware detections, agents, descriptions..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            size="small"
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <SearchIcon />
                </InputAdornment>
              ),
              endAdornment: isSearching ? (
                <InputAdornment position="end">
                  <CircularProgress size={20} />
                </InputAdornment>
              ) : searchTerm ? (
                <InputAdornment position="end">
                  <IconButton
                    size="small"
                    onClick={() => {
                      setSearchTerm('');
                      fetchMalwareLogs(0, pageSize, '');
                    }}
                  >
                    <CloseIcon fontSize="small" />
                  </IconButton>
                </InputAdornment>
              ) : null,
              sx: {
                borderRadius: 2,
                '&:hover': {
                  boxShadow: '0 0 0 1px rgba(0, 0, 0, 0.05)'
                },
                '&.Mui-focused': {
                  boxShadow: '0 0 0 2px rgba(25, 118, 210, 0.25)'
                }
              }
            }}
          />
        </form>
      </Paper>

      <Box sx={{ mb: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
        <Typography variant="body2" color="text.secondary">
          {loading ? 'Loading malware events...' : `${totalEvents.toLocaleString()} malware events found`}
        </Typography>
      </Box>

      <Paper
        sx={{
          height: 'calc(100vh - 330px)',
          width: '100%',
          borderRadius: 2,
          overflow: 'hidden',
          border: '1px solid',
          borderColor: 'divider',
          bgcolor: theme.palette.mode === 'dark' ? 'background.default' : 'background.paper',
          boxShadow: '0 4px 20px rgba(0, 0, 0, 0.05)'
        }}
      >
        {loading && logs.length === 0 ? (
          <Box display="flex" justifyContent="center" alignItems="center" height="100%">
            <CircularProgress />
          </Box>
        ) : logs.length === 0 ? (
          <Box display="flex" justifyContent="center" alignItems="center" height="100%" flexDirection="column" p={3}>
            <BugReportIcon sx={{ fontSize: 64, mb: 2, color: 'text.secondary', opacity: 0.3 }} />
            <Typography variant="h6" color="text.secondary" gutterBottom>
              No malware events found
            </Typography>
            <Typography variant="body2" color="text.secondary" align="center">
              Try adjusting your search terms, filters or time range to see more results.
            </Typography>
            <Button
              variant="outlined"
              startIcon={<RefreshIcon />}
              sx={{ mt: 2 }}
              onClick={handleRefresh}
            >
              Refresh
            </Button>
          </Box>
        ) : (
          <DataGrid
            rows={logs}
            columns={columns}
            pagination
            paginationMode="server"
            rowCount={totalRows}
            page={page}
            pageSize={pageSize}
            onPageChange={handlePageChange}
            onPageSizeChange={handlePageSizeChange}
            rowsPerPageOptions={[50, 100, 1000]}
            disableSelectionOnClick
            loading={loading}
            getRowId={(row) => row.id || row._id || `row-${Math.random()}`}
            sx={{
              '& .MuiDataGrid-cell': {
                cursor: 'pointer',
                borderBottom: `1px solid ${theme.palette.divider}`,
                padding: '8px 16px',
                fontSize: '0.875rem'
              },
              '& .MuiDataGrid-columnHeaders': {
                borderBottom: `2px solid ${theme.palette.divider}`,
                backgroundColor: theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.05)' : 'rgba(0, 0, 0, 0.02)',
                fontSize: '0.875rem',
                fontWeight: 600
              },
              '& .MuiDataGrid-row:hover': {
                backgroundColor: theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.05)' : 'rgba(0, 0, 0, 0.02)',
              },
              border: 'none',
              '& .MuiDataGrid-columnSeparator': {
                display: 'none'
              },
              '& .MuiDataGrid-virtualScroller': {
                backgroundColor: theme.palette.mode === 'dark' ? 'rgba(0, 0, 0, 0.1)' : 'rgba(0, 0, 0, 0.01)',
              },
              '& .MuiDataGrid-footer': {
                borderTop: `1px solid ${theme.palette.divider}`
              },
              '& .MuiTablePagination-root': {
                fontSize: '0.875rem'
              }
            }}
            onRowClick={(params) => handleViewDetails(params.row)}
          />
        )}
      </Paper>

      {/* StructuredLogView Dialog */}
      {selectedLog && showStructuredView && (
        <StructuredLogView
          data={selectedLog}
          onClose={handleCloseStructuredView}
          open={showStructuredView}
        />
      )}

      {/* Fullscreen Chart Dialog */}
      <Dialog
        open={!!fullscreenChart}
        onClose={closeFullscreen}
        maxWidth="lg"
        fullWidth
        PaperProps={{
          sx: {
            height: '90vh',
            maxHeight: '90vh',
            borderRadius: 2,
            overflow: 'hidden',
            boxShadow: '0 10px 40px rgba(0, 0, 0, 0.2)'
          }
        }}
        TransitionComponent={Zoom}
      >
        <DialogTitle>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <Typography variant="h6" sx={{ fontWeight: 500 }}>
              {fullscreenTitle}
            </Typography>
            <IconButton edge="end" color="inherit" onClick={closeFullscreen}>
              <CloseIcon />
            </IconButton>
          </Box>
        </DialogTitle>
        <DialogContent dividers>
          <Box sx={{ height: 'calc(100% - 20px)', width: '100%', p: 2 }}>
            {fullscreenChart && (
              <ReactECharts
                option={fullscreenChart}
                style={{ height: '100%', width: '100%' }}
                opts={{ renderer: 'canvas' }}
                theme={theme.palette.mode === 'dark' ? 'dark' : ''}
                notMerge={true}
                lazyUpdate={true}
              />
            )}
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={closeFullscreen} startIcon={<FullscreenExitIcon />}>
            Exit Fullscreen
          </Button>
        </DialogActions>
      </Dialog>

      {/* Export Dialog */}
      <Dialog
        open={exportDialogOpen}
        onClose={() => setExportDialogOpen(false)}
        maxWidth="sm"
        fullWidth
        PaperProps={{
          sx: {
            borderRadius: 2,
            boxShadow: '0 10px 40px rgba(0, 0, 0, 0.2)'
          }
        }}
      >
        <DialogTitle>
          Export Malware Detection Data to CSV
        </DialogTitle>
        <DialogContent>
          <Typography variant="body1" paragraph>
            Choose which malware events to export:
          </Typography>

          <Box sx={{ mt: 2 }}>
            <Button
              variant="outlined"
              startIcon={<DownloadIcon />}
              onClick={exportCurrentPage}
              fullWidth
              sx={{ mb: 2, borderRadius: 8, py: 1.2, textTransform: 'none' }}
            >
              Export Current Page ({logs.length} events)
            </Button>

            <Button
              variant="contained"
              color="primary"
              startIcon={<DownloadIcon />}
              onClick={exportAllLogs}
              fullWidth
              disabled={totalEvents > 10000}
              sx={{ borderRadius: 8, py: 1.2, textTransform: 'none' }}
            >
              Export All Malware Events ({totalEvents.toLocaleString()} events)
            </Button>

            {totalEvents > 5000 && totalEvents <= 10000 && (
              <Typography variant="caption" color="warning.main" sx={{ display: 'block', mt: 1 }}>
                Exporting a large number of events may take a while and affect performance.
              </Typography>
            )}

            {totalEvents > 10000 && (
              <Typography variant="caption" color="error" sx={{ display: 'block', mt: 1 }}>
                Too many events to export at once (maximum 10,000). Please refine your search filters.
              </Typography>
            )}
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setExportDialogOpen(false)} sx={{ borderRadius: 8 }}>Cancel</Button>
        </DialogActions>
      </Dialog>

      {/* Snackbar for notifications */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={() => setSnackbar({ ...snackbar, open: false })}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
      >
        <Alert
          onClose={() => setSnackbar({ ...snackbar, open: false })}
          severity={snackbar.severity}
          variant="filled"
          elevation={6}
          sx={{ width: '100%' }}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default Malware;